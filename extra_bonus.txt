    void run(bool verbose) {
        // Note: This is a sample code. You can change the implementation as you like.
        // TODO
        if (isStop()) {
            printStep(0);
            printResult();
            return;
        } else
        for (int istep = 0; istep < num_steps; ++istep) {
            if(istep==2){
                RobotC *rc = new RobotC(3, criminal->getCurrentPosition(), map, criminal);
                arr_mv_objs->add(rc);
            } else if((istep+1)%3==0) {
                Position pos = criminal->getCurrentPosition();
                int ss = space(sherlock->getPos().getRow(), pos.getRow(), sherlock->getPos().getCol(), pos.getCol());
                int sw = space(watson->getPos().getRow(), pos.getRow(), watson->getPos().getCol(), pos.getCol());

                Robot *rb=NULL;
                if(ss<sw) {
                    rb = new RobotS(2+(istep+1)/3, criminal->getCurrentPosition(), map, criminal, sherlock);
                } else if(ss>sw) {
                    rb = new RobotW(2+(istep+1)/3, criminal->getCurrentPosition(), map, criminal, watson);
                } else if(ss=sw) {
                    rb = new RobotSW(2+(istep+1)/3, criminal->getCurrentPosition(), map, criminal, sherlock, watson);
                }
                arr_mv_objs->add(rb);
            }

            for (int i = 0; i < arr_mv_objs->size(); ++i) {
                arr_mv_objs->get(i)->move();

                if (isStop()) {
                    printStep(istep);
                    printResult();
                    return;
                }

                if(i==1){
                    if(sherlock->getCurrentPosition().isEqual(watson->getCurrentPosition())){
                        BaseItem *bi = sherlock_bag->get(PASSING_CARD);
                        while(bi!=NULL){
                            watson_bag->insert(bi);
                            bi = sherlock_bag->get(PASSING_CARD);
                        }

                        bi = watson_bag->get(EXCEMPTION_CARD);
                        while(bi!=NULL){
                            sherlock_bag->insert(bi);
                            bi = watson_bag->get(EXCEMPTION_CARD);
                        }
                    }

                    for (int j = 3; j < arr_mv_objs->size(); ++j){
                        if(sherlock->getCurrentPosition().isEqual(arr_mv_objs->get(j)->getCurrentPosition())){
                            Robot *rb = static_cast<Robot *>(arr_mv_objs->get(j));
                            
                            int excard = 0, win = 0;
                            
                            if(sherlock->getHP()%2==1){
                                BaseItem *it = sherlock_bag->get(EXCEMPTION_CARD);
                                if(it!=NULL){
                                    excard = 1;
                                }
                            }

                            if(rb->getType()==S){
                                if(sherlock->getEXP()>400){
                                    win = 1;
                                } else if(!excard) {
                                    sherlock->setEXP(ceil(sherlock->getEXP()*0.9));
                                }
                            } else if(rb->getType()==W){
                                win = 1;
                            } else if(rb->getType()==SW){
                                if(sherlock->getEXP()>300 && sherlock->getHP()>335){
                                    win = 1;
                                } else {
                                    if(!excard){
                                        sherlock->setHP(ceil(sherlock->getHP()*0.85));
                                        sherlock->setEXP(ceil(sherlock->getEXP()*0.85));
                                    }
                                }
                            } else if(rb->getType()==C){
                                if(sherlock->getEXP()>500){
                                    printStep(istep);
                                    sherlock->getPos().setRow(criminal->getPos().getRow());
                                    sherlock->getPos().setCol(criminal->getPos().getCol());
                                    printResult();
                                    return;
                                } else {
                                    win = 1;
                                }
                            }

                            if(win){
                                sherlock_bag->insert(rb->getBaseItem());
                            }

                            BaseItem *it = sherlock_bag->get();
                            if(it!=NULL){    
                                it->use(sherlock, NULL);
                            }
                        }
                    }
                }

                if(i==2){
                    if(sherlock->getCurrentPosition().isEqual(watson->getCurrentPosition())){
                        BaseItem *bi = sherlock_bag->get(PASSING_CARD);
                        while(bi!=NULL){
                            watson_bag->insert(bi);
                            bi = sherlock_bag->get(PASSING_CARD);
                        }

                        bi = watson_bag->get(EXCEMPTION_CARD);
                        while(bi!=NULL){
                            sherlock_bag->insert(bi);
                            bi = watson_bag->get(EXCEMPTION_CARD);
                        }
                    }

                    for (int j = 3; j < arr_mv_objs->size(); ++j){
                        if(watson->getCurrentPosition().isEqual(arr_mv_objs->get(j)->getCurrentPosition())){
                            Robot *rb = static_cast<Robot *>(arr_mv_objs->get(j));
                            PassingCard *pc = NULL;
                            
                            int suitcard = 0, win = 0;
                            
                            if(watson->getHP()%2==0){
                                BaseItem *bi = watson_bag->get(PASSING_CARD);
                                pc = static_cast<PassingCard *>(bi);
                            }

                            if(pc){
                                if(pc->challenge=="all") {
                                    suitcard = 1; 
                                } else if(pc->challenge=="RobotS" && rb->getType()==S) {
                                    suitcard = 1; 
                                } else if(pc->challenge=="RobotW" && rb->getType()==W) {
                                    suitcard = 1; 
                                } else if(pc->challenge=="RobotSW" && rb->getType()==SW) {
                                    suitcard = 1; 
                                } else if(pc->challenge=="RobotC" && rb->getType()==C) {
                                    printStep(istep);
                                    watson->getPos().setRow(criminal->getPos().getRow());
                                    watson->getPos().setCol(criminal->getPos().getCol());
                                    printResult();
                                    return;
                                }

                                if(!suitcard){
                                    watson->setEXP(watson->getEXP()-50);
                                }
                                win = 1;
                            } else {
                                if(rb->getType()==S){
                                    win = 0;
                                } else if(rb->getType()==W){
                                    if(watson->getHP()>350){
                                        win = 1;
                                    } else {
                                        watson->setHP(ceil(watson->getHP()*0.95));
                                    }
                                } else if(rb->getType()==SW){
                                    if(watson->getEXP()>600 && watson->getHP()>165){
                                        win = 1;
                                    } else {
                                        watson->setHP(ceil(watson->getHP()*0.85));
                                        watson->setEXP(ceil(watson->getEXP()*0.85));
                                    }
                                } else if(rb->getType()==C){
                                    win = 1;
                                }
                            }

                            if(win){
                                watson_bag->insert(rb->getBaseItem());
                            }

                            BaseItem *it = watson_bag->get();
                            if(it!=NULL){    
                                it->use(watson, NULL);
                            }
                        }
                    }
                }

                if(i>=3){
                    if(sherlock->getCurrentPosition().isEqual(arr_mv_objs->get(i)->getCurrentPosition())){
                        Robot *rb = static_cast<Robot *>(arr_mv_objs->get(i));
                            
                        int excard = 0, win = 0;
                        
                        if(sherlock->getHP()%2==1){
                            BaseItem *it = sherlock_bag->get(EXCEMPTION_CARD);
                            if(it!=NULL){
                                excard = 1;
                            }
                        }

                        if(rb->getType()==S){
                            if(sherlock->getEXP()>400){
                                win = 1;
                            } else if(!excard) {
                                sherlock->setEXP(ceil(sherlock->getEXP()*0.9));
                            }
                        } else if(rb->getType()==W){
                            win = 1;
                        } else if(rb->getType()==SW){
                            if(sherlock->getEXP()>300 && sherlock->getHP()>335){
                                win = 1;
                            } else {
                                if(!excard){
                                    sherlock->setHP(ceil(sherlock->getHP()*0.85));
                                    sherlock->setEXP(ceil(sherlock->getEXP()*0.85));
                                }
                            }
                        } else if(rb->getType()==C){
                            if(sherlock->getEXP()>500){
                                printStep(istep);
                                sherlock->getPos().setRow(criminal->getPos().getRow());
                                sherlock->getPos().setCol(criminal->getPos().getCol());
                                printResult();
                                return;
                            } else {
                                win = 1;
                            }
                        }

                        if(win){
                            sherlock_bag->insert(rb->getBaseItem());
                        }

                        BaseItem *it = sherlock_bag->get();
                        if(it!=NULL){    
                            it->use(sherlock, NULL);
                        }
                    }
                
                    if(watson->getCurrentPosition().isEqual(arr_mv_objs->get(i)->getCurrentPosition())){
                        Robot *rb = static_cast<Robot *>(arr_mv_objs->get(i));
                        PassingCard *pc = NULL;
                        
                        int suitcard = 0, win = 0;
                        
                        if(watson->getHP()%2==0){
                            BaseItem *bi = watson_bag->get(PASSING_CARD);
                            pc = static_cast<PassingCard *>(bi);
                        }

                        if(pc){
                            if(pc->challenge=="all") {
                                suitcard = 1; 
                            } else if(pc->challenge=="RobotS" && rb->getType()==S) {
                                suitcard = 1; 
                            } else if(pc->challenge=="RobotW" && rb->getType()==W) {
                                suitcard = 1; 
                            } else if(pc->challenge=="RobotSW" && rb->getType()==SW) {
                                suitcard = 1; 
                            } else if(pc->challenge=="RobotC" && rb->getType()==C) {
                                printStep(istep);
                                watson->getPos().setRow(criminal->getPos().getRow());
                                watson->getPos().setCol(criminal->getPos().getCol());
                                printResult();
                                return; 
                            }

                            if(!suitcard){
                                watson->setEXP(watson->getEXP()-50);
                            }
                            win = 1;
                        } else {
                            if(rb->getType()==S){
                                win = 0;
                            } else if(rb->getType()==W){
                                if(watson->getHP()>350){
                                    win = 1;
                                } else {
                                    watson->setHP(ceil(watson->getHP()*0.95));
                                }
                            } else if(rb->getType()==SW){
                                if(watson->getEXP()>600 && watson->getHP()>165){
                                    win = 1;
                                } else {
                                    watson->setHP(ceil(watson->getHP()*0.85));
                                    watson->setEXP(ceil(watson->getEXP()*0.85));
                                }
                            } else if(rb->getType()==C){
                                win = 1;
                            }
                        }

                        if(win){
                            watson_bag->insert(rb->getBaseItem());
                        }

                        BaseItem *it = watson_bag->get();
                        if(it!=NULL){    
                            it->use(watson, NULL);
                        }
                    }
                }
                
                if (isStop()) {
                    printStep(istep);
                    return;
                }

                if (verbose) {
                    printStep(istep);
                }      
            }
        }
        printResult();
    }